declaration_list -> int ID declaration declaration_list_prime
declaration_list -> void ID ( params_list ) compound_stmt_void declaration_list_prime
declaration_list_prime -> int ID declaration declaration_list_prime
declaration_list_prime -> void ID ( params_list ) compound_stmt_void declaration_list_prime
declaration_list_prime -> ε
declaration -> var_array_declaration ; 
declaration -> ( params_list ) compound_stmt_int_return
var_array_declaration -> [NUM]  
var_array_declaration -> ε
params_list -> int ID param_array params_list_prime
params_list -> void
params_list_prime -> , int  ID param_array params_list_prime 
params_list_prime -> ε
param_array -> [ ] 
param_array -> ε
compound_stmt_void -> { local_declarations statement_list_void }
compound_stmt_int_return -> { local_declarations statement_list_int return_stmt_int }
compound_stmt_int_no_return -> { local_declarations statement_list_int }
local_declarations -> ε
local_declarations ->  int ID var_array_declaration ; local_declarations 
statement_list_void ->  statement_void statement_list_void 
statement_list_void -> ε
statement_list_int ->  statement_int statement_list_int 
statement_list_int -> ε
statement_void -> assignment_call_stmt 
statement_void -> compound_stmt_void 
statement_void -> selection_stmt_void 
statement_void -> iteration_stmt_void 
statement_void -> input_stmt 
statement_void -> output_stmt
statement_int -> assignment_call_stmt 
statement_int -> compound_stmt_int_no_return 
statement_int -> selection_stmt_int 
statement_int -> iteration_stmt_int 
statement_int -> input_stmt 
statement_int -> output_stmt
assignment_call_stmt -> ID assignment_call_stmt_factor ;
assignment_call_stmt_factor -> var_array = expression  
assignment_call_stmt_factor -> ( args )
selection_stmt_void -> if  ( expression )  statement_void  selection_stmt_void_else
selection_stmt_void_else ->  else  statement_void  
selection_stmt_void_else -> ε
selection_stmt_int -> if  ( expression )  statement_int  selection_stmt_int_else
selection_stmt_int_else ->  else  statement_int  
selection_stmt_int_else -> ε
iteration_stmt_void -> while ( expression )  statement_void
iteration_stmt_int -> while ( expression )  statement_int
return_stmt_int -> return return_stmt_int_exp ;
return_stmt_int_exp -> expression 
return_stmt_int_exp -> ε
input_stmt -> input ID var_array ;
output_stmt -> output expression ;
var_array -> [ arithmetic_expression ] 
var_array -> ε
expression -> arithmetic_expression expression_factor
expression_factor -> relop arithmetic_expression 
expression_factor -> ε
relop -> <= 
relop -> < 
relop -> > 
relop -> >= 
relop -> == 
relop -> !=
arithmetic_expression -> term arithmetic_expression_prime
arithmetic_expression_prime -> addop term arithmetic_expression_prime 
arithmetic_expression_prime -> ε
addop -> + 
addop -> -
term -> factor term_prime
term_prime -> mulop factor term_prime 
term_prime -> ε
mulop -> * 
mulop -> /
factor -> ( arithmetic_expression ) 
factor -> factor_ID 
factor -> NUM
factor_ID ->  ID factor_factor
factor_factor -> var_array 
factor_factor -> ( args )
args -> arithmetic_expression args_list 
args -> ε
args_list -> , arithmetic_expression args_list 
args_list -> ε
