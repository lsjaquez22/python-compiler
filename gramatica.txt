declaration_list -> int ID declaration declaration_list_prime | void ID ( params_list ) compound_stmt_void declaration_list_prime
declaration_list_prime -> int ID declaration declaration_list_prime | void ID ( params_list ) compound_stmt_void declaration_list_prime | ε
declaration -> var_array_declaration ; | ( params_list ) compound_stmt_int_return
var_array_declaration -> [NUM]  | ε
params_list -> int ID param_array params_list_prime | void
params_list_prime -> , int  ID param_array params_list_prime | ε
param_array -> [ ] | ε
compound_stmt_void -> { local_declarations statement_list_void }
compound_stmt_int_return -> { local_declarations statement_list_int return_stmt_int }
compound_stmt_int_no_return -> { local_declarations statement_list_int }
local_declarations ->  int ID var_array_declaration ; local_declarations | ε
statement_list_void ->  statement_void statement_list_void | ε
statement_list_int ->  statement_int statement_list_int | ε
statement_void -> assignment_call_stmt | compound_stmt_void | selection_stmt_void | iteration_stmt_void | input_stmt | output_stmt
statement_int -> assignment_call_stmt | compound_stmt_int_no_return | selection_stmt_int | iteration_stmt_int | return_stmt_int | input_stmt | output_stmt
assignment_call_stmt -> ID assignment_call_stmt_factor ;
assignment_call_stmt_factor -> var_array = expression  | ( args )
selection_stmt_void -> if  ( expression )  statement_void  selection_stmt_void_else
selection_stmt_void_else ->  else  statement_void  | ε
selection_stmt_int -> if  ( expression )  statement_int  selection_stmt_int_else
selection_stmt_int_else ->  else  statement_int  | ε
iteration_stmt_void -> while ( expression )  statement_void
iteration_stmt_int -> while ( expression )  statement_int
return_stmt_int -> return return_stmt_int_exp ;
return_stmt_int_exp -> expression | ε
input_stmt -> input ID var_array ;
output_stmt -> output expression ;
var_array -> [ arithmetic_expression ] | ε
expression -> arithmetic_expression expression_factor
expression_factor -> relop arithmetic_expression | ε
relop -> <= | < | > | >= | == | !=
arithmetic_expression -> term arithmetic_expression_prime
arithmetic_expression_prime -> addop term arithmetic_expression_prime | ε
addop -> + | -
term -> factor term_prime
term_prime -> mulop factor term_prime | ε
mulop -> * | /
factor -> ( arithmetic_expression ) | factor_ID | NUM
factor_ID ->  ID factor_factor
factor_factor -> var_array | ( args )
args -> arithmetic_expression args_list | ε
args_list -> , arithmetic_expression args_list | ε
